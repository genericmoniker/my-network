
services:

  # Landing page
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    ports:
      - 80:3000
    volumes:
      - ./homepage_config:/app/config  # inside the repo so we can version
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
    environment:
      - TZ=${TZ}
      - HOMEPAGE_ALLOWED_HOSTS=${HOMEPAGE_ALLOWED_HOSTS}

  # Server utilization dashboard
  dash:
    image: mauricenino/dashdot:latest
    container_name: dash
    restart: unless-stopped
    privileged: true
    environment:
      - TZ=${TZ}
      - DASHDOT_PAGE_TITLE=Kylo
      - DASHDOT_DISABLE_INTEGRATIONS=true
      - DASHDOT_USE_IMPERIAL=true
      - DASHDOT_ALWAYS_SHOW_PERCENTAGES=true
      - DASHDOT_SHOW_HOST=true
      - DASHDOT_CUSTOM_HOST=kylo.home
      - DASHDOT_ENABLE_CPU_TEMPS=true
      - DASHDOT_ACCEPT_OOKLA_EULA=true
    ports:
      - '3001:3001'
    volumes:
      - /:/mnt/host:ro

  # Ad block
  # https://github.com/pi-hole/docker-pi-hole
  pihole:
    image: pihole/pihole:latest
    container_name: pihole

    environment:
      - WEBPASSWORD=${PIHOLE_WEBPASSWORD}
      - ServerIP=${PIHOLE_SERVERIP}   # Address of Pi-hole host
      - VIRTUAL_HOST=pihole.home.lan
      - PIHOLE_DNS_1=1.1.1.3  # Cloudflare DNS - No Malware or Adult Content
      - PIHOLE_DNS_2=1.0.0.3  # Cloudflare DNS - Secondary, No Malware or Adult Content
      - TZ=${TZ}

    volumes:
      - '~/mounts/pihole/etc-pihole:/etc/pihole'
      - '~/mounts/pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    dns:
      - 127.0.0.1
      - 1.1.1.3
      - 1.0.0.3
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "5353:80/tcp"
    restart: unless-stopped
    networks:
      wg-easy:
        ipv4_address: 10.8.1.2

  # Pi-hole block notifier
  pihole-notifier:
    depends_on:
      - pihole
    container_name: pihole-notifierf
    build: pihole-notifier
    volumes:
      - ~/mounts/pihole/etc-pihole:/etc/pihole
      - ~/mounts/notifier/etc-eero:/etc/eero
    environment:
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FTL_DB_FILE=/etc/pihole/pihole-FTL.db
      - MAIL_SENDER=${MAIL_SENDER}
      - MAIL_RECIPIENTS=${MAIL_RECIPIENTS}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - NOTIFIER_WHITELIST=${NOTIFIER_WHITELIST}
      - TZ=${TZ}

    restart: unless-stopped

  # VPN
  # https://github.com/wg-easy/wg-easy
  wireguard:
    depends_on:
      - pihole
    environment:
      # Server's hostname (clients will connect to):
      - WG_HOST=${WIREGUARD_HOST}
      # See https://github.com/wg-easy/wg-easy/blob/master/How_to_generate_an_bcrypt_hash.md
      - PASSWORD_HASH=${WIREGUARD_PASSWORD_HASH}

      # ðŸ’¡ This is the Pi-Hole Container's IP Address
      - WG_DEFAULT_DNS=10.8.1.2
      - WG_DEFAULT_ADDRESS=10.8.0.x

      - UI_TRAFFIC_STATS=true
      - UI_CHART_TYPE=2

      - TZ=${TZ}
    image: ghcr.io/wg-easy/wg-easy
    container_name: wireguard
    volumes:
      - ~/mounts/wireguard:/etc/wireguard
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      wg-easy:
        ipv4_address: 10.8.1.3

  # Dynamic DNS updater
  # https://github.com/troglobit/inadyn
  inadyn:
    image: troglobit/inadyn:latest
    container_name: inadyn
    environment:
      - TZ=${TZ}
    restart: unless-stopped
    volumes:
      # This file should be created in advance!
      - ~/mounts/inadyn/inadyn.conf:/etc/inadyn.conf

  # CNM monitor/notifier
  cnm:
    image: genericmoniker/cnm-notifier:latest
    container_name: cnm
    environment:
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - MAIL_SENDER=${MAIL_SENDER}
      - MAIL_RECIPIENTS=${MAIL_RECIPIENTS}
      - CNM_USERNAME=${CNM_USERNAME}
      - CNM_PASSWORD=${CNM_PASSWORD}
      - CNM_FIREWALLS=${CNM_FIREWALLS}
      - TZ=${TZ}
    restart: unless-stopped

  # Security camera NVR
  frigate:
    image: ghcr.io/blakeblackshear/frigate:stable
    container_name: frigate
    restart: unless-stopped
    devices:
      - /dev/bus/usb:/dev/bus/usb  # Passes the USB Coral
    environment:
      - TZ=${TZ}
      - FRIGATE_RTSP_USER_ALERT=${FRIGATE_RTSP_USER_ALERT}
      - FRIGATE_RTSP_PASS_ALERT=${FRIGATE_RTSP_PASS_ALERT}
      - FRIGATE_RTSP_USER_TAPO=${FRIGATE_RTSP_USER_TAPO}
      - FRIGATE_RTSP_PASS_TAPO=${FRIGATE_RTSP_PASS_TAPO}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./frigate_config:/config         # config is on the host, inside the repo so we can version config.yml
      - ~/mounts/frigate:/media/frigate  # media is mounted via Linux cifs mount (fstab) to the NAS
      - type: tmpfs
        target: /tmp/cache
        tmpfs:
          size: 1000000000
    ports:
      - "5000:5000" # UI
      - "8554:8554" # RTSP feeds
      - "8555:8555/tcp" # WebRTC over tcp
      - "8555:8555/udp" # WebRTC over udp

  # Time series database
  influxdb:
    image: influxdb
    container_name: influxdb
    restart: unless-stopped
    ports:
      - 8086:8086
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-conf:/etc/influxdb2
    environment:
      - TZ=${TZ}
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=sleepy
      - DOCKER_INFLUXDB_INIT_BUCKET=sleepy

  # Sleep data collector
  sleepy:
    image: genericmoniker/sleepy:latest
    container_name: sleepy
    restart: unless-stopped
    depends_on:
      - influxdb
    environment:
      - TZ=${TZ}
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=sleepy
      - INFLUXDB_BUCKET=sleepy
      - INSTANCE_PATH=/instance
    volumes:
      - ./sleepy_instance:/instance

  # File sync
  syncthing:
    image: syncthing/syncthing:latest
    container_name: syncthing
    hostname: kylo
    restart: unless-stopped
    ports:
      - 8384:8384 # Web UI
      - 22000:22000/tcp # TCP file transfers
      - 22000:22000/udp # QUIC file transfers
      - 21027:21027/udp # Receive local discovery broadcasts
    volumes:
      - syncthing:/var/syncthing
    environment:
      - TZ=${TZ}
    healthcheck:
      test: curl -fkLsS -m 2 127.0.0.1:8384/rest/noauth/health | grep -o --color=never OK || exit 1
      interval: 1m
      timeout: 10s
      retries: 3

networks:
  wg-easy:
    ipam:
      config:
        - subnet: 10.8.1.0/24

volumes:
  influxdb-data: {}
  influxdb-conf: {}
  syncthing: {}
